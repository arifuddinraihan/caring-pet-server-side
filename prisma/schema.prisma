// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  profilePhoto     String?
  role             UserRole          @default(USER)
  password         String
  activeStatus     UserStatus        @default(ACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  admin            Admin?
  // One-to-Many relationship with AdoptionRequest
  adoptionRequests AdoptionRequest[]

  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

// Pet Model
model Pet {
  id                   String   @id @default(uuid())
  name                 String
  petProfilePhoto      String
  morePetPhoto         String[]
  species              String
  breed                String
  age                  Int
  size                 String
  location             String
  description          String
  temperament          String
  medicalHistory       String
  adoptionRequirements String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // One-to-Many relationship with AdoptionRequest
  adoptionRequests AdoptionRequest[]

  @@map("pets")
}

// AdoptionRequest Model
model AdoptionRequest {
  id     String @id @default(uuid())
  // Many-to-One relationship with User
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Many-to-One relationship with Pet
  pet   Pet    @relation(fields: [petId], references: [id])
  petId String

  status                 AdoptionStatus @default(PENDING)
  petOwnershipExperience String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime?      @updatedAt

  @@map("adoption-requests")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  DEACTIVE
}

// Adoption Status enum
enum AdoptionStatus {
  PENDING
  APPROVED
  REJECTED
}
